#
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"POT-Creation-Date: 2022-06-15 11:43:41.797412\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"

#: game_config
msgid "Niki's Logic"
msgstr ""

#: intro
msgid ""
"# Captain de Morgan's logic Game\n"
"\n"
"## By UCL\n"
"\n"
"Learn some logic yo\n"
"\n"
"# What is this game?\n"
"\n"
"This is a game to teach you some mathematical logic using Lean.\n"
"\n"
"Have fun!\n"
"\n"
"# Credits\n"
"\n"
"Some levels have been shamelessly borrowed from Kevin Buzzard's and Mohammad "
"Pedramfar's \"Natural Numbers Game\" as well as \n"
"Kevin Buzzard's \"Formalizing mathematics\" course at Imperial College. \n"
"\n"
"\n"
msgstr ""

#: world_config
msgid "Tutorial"
msgstr ""

#: Tutorial level 1
msgid ""
"\n"
"#Logical statements \n"
"\n"
"You've seen logical statements already, these are statements that can be "
"true or false, for example: \n"
"\n"
"-The sum of two odd numbers is an even number\n"
"\n"
"-$36$ is divisible by $3$\n"
"\n"
"-$x > 2$\n"
"\n"
"\n"
"Lets see how one does this a computer, specifically in lean. In lean, "
"logical staments live in a world called `Prop`. So for example \n"
"if we write `P : Prop` we mean \"$P$ is a logical statement.\" Think of the "
"`:` symbol as saying $P$ is a resident of `Prop` world \n"
"(in maths this would be denoted by something like `P ∈ Prop`).\n"
"\n"
"#Truth Values\n"
"\n"
"The truth value of a logical statement (i.e. some `P : Prop`) is whether the "
"statement is true or false. For example, the truth value of the\n"
"statement \"For all integers x ∈ ℤ,  0 ≤ x²\" is *true* while  \"For all "
"integers x ∈ ℤ,  0 ≤ x³\" is *false*. \n"
"\n"
"In lean we assign truth values as follows: We first think of a proposition $P"
"$ as a set with *at most* one element. If this set is empty, then\n"
"we say `P` is *false*. Otherwise, if this set has an element, lets call it $p"
"$ (we will usually use upper case letters\n"
"for logical statements, and lower case for their proofs), then this "
"statement is *true* and $p$ is the \n"
"proof. \n"
"\n"
"So to recap, if $P$ is the true/false statement (the statement of "
"proposition), and $p$ is its proof.\n"
"The we It's like thinking $P$ being the set and $p$ being the element. In "
"fact computer scientists\n"
"sometimes think about the following analogy: propositions are like sets,\n"
"and their proofs are like their elements. Just as above, where we had `P : "
"Prop` to mean $P$ is a proposition, we write `p : P` to mean\n"
"\"$p$ is a proof of $P$\".\n"
"\n"
"The aim of this game is to learn how to manipulate logical statements and "
"their proofs. Lets start with a super basic example of how a lemma \n"
"looks like in lean.\n"
"\n"
"This is where the window on the right will come into play. If you delete the "
"*sorry* below, on the right you will see the following: \n"
"\n"
"```\n"
"P : Prop,\n"
"p : P,\n"
"⊢ P\n"
"```\n"
"\n"
"Here the first two lines are our assumptions and the thing after the `⊢` "
"symbol is what we are being asked to prove. \n"
"\n"
"Now, in this game our \"moves\" or, as we call them in lean, *Tactics*, are "
"what will allow us to manipulate our statement and produce proofs.\n"
"\n"
"The first tactic we will look at is called *exact* and what it does is, if "
"you need to prove a statement $P$ and you have proof of it,\n"
"say, `p: P`, then `exact p` will prove it. \n"
"\n"
"Note that at the end of each line we write we need to have a comma `,` to "
"tell lean that this is the end of our move. \n"
"\n"
"So if below you change the `sorry` for `exact p` you'll see that on the "
"right it will change to say `Proof complete`. \n"
"\n"
msgstr ""

#: Tutorial level 1
msgid ""
"Lets try and prove that if $P$ is a logical stament (i.e. `P : Prop`) and $p"
"$ is a proof of $P$ (i.e. `p : P`) then $P$ is true.\n"
msgstr ""

#: Tutorial level 1
msgid ""
"Now try the following one:\n"
"\n"
msgstr ""

#: Tutorial level 1
msgid ""
"\n"
"\n"
"\n"
"#Combining logical statements\n"
"\n"
"Now, we can take these statements and create new ones. For example if we "
"have two statements `P Q : Prop` we can write\n"
"` P → Q` to mean $P$ implies $Q$. Similarly, we can write `¬P` for the "
"statement \"Not $P$\". \n"
"\n"
"Say we have the following lemma:\n"
"\n"
"```\n"
"P Q : Prop\n"
"h : P → Q\n"
"p : P\n"
"⊢ Q\n"
"```\n"
"This asks us to prove: If $P$ implies $Q$ (which is written ` P → Q`) and we "
"have a proof of $P$ (i.e. we have `p : P`). Then $Q$ is\n"
"true (i.e. we have a proof of `Q`). \n"
"\n"
"Here we have given the name $h$ to the implication ` P → Q`. We think of $h$ "
"as a map between statements in `Prop` world. \n"
"\n"
"Now this lemma is asking us to take a proof of $P$ and turn it into a proof "
"of $Q$. Since we know that $P$ implies $Q$ then we know that if\n"
"$P$ is true then so is $Q$. So we can use our map in `Prop` world to "
"transform our proof of $P$ into a proof of $Q$. \n"
"\n"
"If we write `exact h(p)` below we get what we want.\n"
"\n"
"Note that it has to be lower case $p$, since $P$ is the logical statement, "
"but what we want to transform is the proof.\n"
"\n"
"\n"
"\n"
msgstr ""

#: Tutorial level 1
msgid ""
"If $P$ implies $Q$ (which is written ` P → Q`) and we have a proof of $P$ (i."
"e. we have `p : P`). Then $Q$ is\n"
"true (i.e. we have a proof of `Q`)\n"
msgstr ""

#: Tutorial level 1
msgid ""
"Now try the following one: \n"
"\n"
msgstr ""

#: world_config
msgid "Logical statements"
msgstr ""

#: Logical statements level 1
msgid "Propositions"
msgstr ""

#: Logical statements level 1
msgid ""
"\n"
"\n"
"\n"
"If your goal is to prove `P → Q` (i.e. that $P\\implies Q$)\n"
"then `intro p`, meaning \"assume $p$ is a proof of $P$\", will make "
"progress.\n"
"To solve the goal below, you have to come up with a function from\n"
"`P` (thought of as the set of proofs of $P$!) to itself. Start with\n"
"`intro p,`\n"
"(i.e. \"let $p$ be a proof of $P$\") and note that our\n"
"local context now looks like this:\n"
"```\n"
"P : Prop,\n"
"p : P\n"
"⊢ P\n"
"```\n"
"Our job now is to construct a proof of $P$. But $p$ is a proof of $P$.\n"
"So\n"
"`exact p,`\n"
"will close the goal. Note that `exact P` will not work -- don't\n"
"confuse a true/false statement (which could be false!) with a proof.\n"
"We will stick with the convention of capital letters for propositions\n"
"and small letters for proofs.\n"
msgstr ""

#: Logical statements level 1
msgid "If $P$ is a proposition then $P\\implies P$.\n"
msgstr ""

#: Logical statements level 2
msgid "More propositions"
msgstr ""

#: Logical statements level 2
msgid ""
"Lets look at some other logical statements\n"
"\n"
"\n"
"\n"
msgstr ""

#: Logical statements level 2
msgid ""
"Lets try and prove that if `P` implies `Q` (which is written ` P → Q`) and "
"we have a proof of `P` (i.e. we have `p : P`). Then `Q` is\n"
"true (i.e. we have a proof of `Q`)\n"
msgstr ""
