#
msgid ""
msgstr ""
"Project-Id-Version: 1.0\n"
"POT-Creation-Date: 2022-06-29 18:32:23.758017\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"

#: game_config
msgid "De Morgan's game"
msgstr ""

#: intro
msgid ""
"# Dungeons and De Morgan's: The logic Game\n"
"\n"
"## By Chris Birkbeck and Niki Kalaydzhieva\n"
"\n"
"Go on a Mathemagical quest to learn some logic!\n"
"\n"
"# What is this game?\n"
"\n"
"This is a game to teach you some mathematical logic using Lean.\n"
"\n"
"Have fun!\n"
"\n"
"# Credits\n"
"\n"
"Some levels have been shamelessly borrowed from Kevin Buzzard's and Mohammad "
"Pedramfar's \n"
"<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\" "
"target=\"blank\">Natural Numbers Game</a>\n"
"as well  as Kevin Buzzard's <a href=\"https://www.ma.imperial.ac.uk/~buzzard/"
"xena/formalising-mathematics-2022/\" target=\"blank\">Formalising "
"mathematics</a> \n"
"course at Imperial College London. \n"
"\n"
"\n"
"\n"
msgstr ""

#: world_config
msgid "Tutorial"
msgstr ""

#: Tutorial level 1
msgid ""
"\n"
"#Logical statements \n"
"\n"
"In Logic, a *statement* is a sentence that is either true of false, for "
"example: \n"
"\n"
"```md\n"
"1. The sum of two odd numbers is an even number\n"
"2. 36 is divisible by 3\n"
"3. x > 2\n"
"```\n"
"\n"
"One of the goals of this game is to show you how to work with logical "
"statements on a computer, \n"
"specifically using a computer language called Lean. In Lean, logical "
"staments live in a \n"
"place called `Prop` (which is short for \"Propositions\"). For example, if "
"we write  <mark style =\"background-color :   #ebdef0 \">`P : Prop`</mark> \n"
"we mean \"`P` is a logical statement.\"  Think of the \"`:`\" symbol as "
"saying `P` lives in `Prop` \n"
"(in Maths this would be denoted by `P ∈ Prop`, to mean `P` is an element of "
"`Prop`).\n"
"\n"
"#Truth Values\n"
"\n"
"The *truth value* of a logical statement (i.e. some `P : Prop` is whether "
"the statement is true or \n"
"false. For example, the truth value of the statement: \"For all integers $x "
"∈ ℤ$, $0 ≤ x^2$\" \n"
"is *true*, while \"For all integers $x ∈ ℤ$, $0 ≤ x^3$\" is *false*. \n"
"\n"
"In Lean we assign truth values as follows: We first think of a proposition $P"
"$ as a set with \n"
"*at most* one element. If this set is empty, then we say `P` is *false*. "
"Otherwise, if this set has \n"
"an element, lets call it `p`, then this statement is *true* and `p` is the "
"proof. We will usually \n"
"use upper case letters for logical statements, and lower case for their "
"proofs.\n"
"\n"
"To recap, we write `P : Prop` to mean `P` is a \n"
"proposition and we write  <mark style =\"background-color : #ebdef0 \">`p : "
"P`</mark>  to mean \"`p` is a \n"
"proof of `P`\".\n"
"\n"
"The aim of this game is to learn how to prove logical statements, which we "
"call *lemmas* through a\n"
"series of manipulations which we call *tactics*. \n"
" \n"
"Lets start with a simple example of how a lemma looks like in Lean.\n"
"\n"
"This is where the window on the right will come into play. If you delete the "
"*sorry* below, \n"
"on the right you will see the following state: \n"
"\n"
"```\n"
"P : Prop,\n"
"p : P,\n"
"⊢ P\n"
"```\n"
"\n"
"Here, the first two lines are our assumptions, where the first line `P : "
"Prop` says \"$P$ is a \n"
"logical statement\" and the second line `p : P` says `p` is the proof of "
"`P`.\n"
"\n"
"The thing after the `⊢` symbol is what we need to prove to win the level (i."
"e. prove the lemma).\n"
"\n"
"In this game our \"moves\" or, as we call them in Lean, *tactics*, are what "
"will allow us to \n"
"manipulate our statements and produce proofs.\n"
"\n"
"The first tactic we will use is called *exact*. It is used when you need to "
"prove a \n"
"statement $P$ and you have the proof of it. In the example above we have "
"`p : P` and we need to\n"
"prove `P`, then typing <mark style =\"background-color :   #ebdef0 \">`exact "
"p,`</mark>  will prove it. \n"
"\n"
"**Note:  We end each line with a comma `,` to tell Lean that this is the end "
"of our move.** \n"
"\n"
"Try it for yourself now and see what happens!\n"
"\n"
msgstr ""

#: Tutorial level 1
msgid ""
"If $P$ is a logical stament and $p$ is a proof of $P$ then $P$ is true.\n"
msgstr ""

#: Tutorial level 1
msgid ""
"## Summary \n"
"If the goal is `⊢ P` then `exact p,` will close the goal if\n"
"and only if `p` is a proof of `P` (i.e. `p : P`) \n"
"## Details\n"
"Say $P$, $Q$ and $R$ are logical staments\n"
"and your lemma looks like this: \n"
"```\n"
"p : P,\n"
"h : P → Q,\n"
"j : Q → R\n"
"⊢ R\n"
"```\n"
"Then you can solve the level by using `exact j(h(p)),`\n"
msgstr ""

#: Tutorial level 2
msgid ""
"If $P,Q$ are logical statements with respective proofs $p,q$, then $Q$ is "
"true.\n"
msgstr ""

#: Tutorial level 3
msgid ""
"\n"
"#Combining logical statements\n"
"\n"
"We can combine basic statements to create new ones. For example, we can "
"write `¬P` for the \n"
"statement \"Not `P`\" and if we have two statements `P Q : Prop` \n"
"we can write `P → Q` to mean `P` implies `Q`. \n"
"\n"
"Say we have the following state of our lemma:\n"
"\n"
"```\n"
"P Q : Prop\n"
"h : P → Q\n"
"p : P\n"
"⊢ Q\n"
"```\n"
"As in level one, the first line says `P` and `Q` are logical statements and "
"the third line says\n"
"that `P` has a proof `p`.\n"
"\n"
"In the second line we have the implication `P → Q`, \n"
"which we have called `h`. We think of `h`  as a one-way road from the "
"statement `P` to the \n"
"statement `Q` in `Prop`. In Maths, we would call `h` a function or a map. \n"
"\n"
"Finally, our goal is to prove `Q` is true.\n"
"\n"
"Using <mark style =\"background-color :  #ebdef0 \">`exact h(p),`</mark> "
"will prove our lemma.\n"
"\n"
"Why does this work? We know that `P` is true, since we have a proof of it "
"`p` and `h` tells us that\n"
"if `P` is true then `Q` is true. So combining `h` and `p` results in a proof "
"of `Q`.\n"
"\n"
"**Note: We use `h(p)` rather than `h(P)`, because we want to transform the "
"proof of `P` into \n"
"a proof of `Q`.**\n"
"\n"
"\n"
"\n"
msgstr ""

#: Tutorial level 3
msgid ""
"Let $P,Q$ be logical statements and $P$ implies $Q$. If $P$ is true, then so "
"is $Q$.\n"
msgstr ""

#: Tutorial level 4
msgid ""
"Let $P,Q,R$ be logical statements with $P$ implies $Q$ and $Q$ implies $R$. "
"If $P$ is true, then so \n"
"is $R$. \n"
msgstr ""

#: world_config
msgid "Logical statements"
msgstr ""

#: Logical statements level 1
msgid "apply tactic"
msgstr ""

#: Logical statements level 1
msgid ""
"\n"
"## The `apply` tactic\n"
"\n"
"If your lemma has the following state: \n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ Q\n"
"```\n"
"\n"
"Here, we assume that `P` implies `Q` and our goal is to prove `Q`. Then the "
"tactic  <mark style =\"background-color : #ebdef0 \">`apply h,`</mark> \n"
"will change our goal to `P` and leave our assumptions unchanged, i.e. your "
"new state will be\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to "
"a potentially easier \n"
"goal, without changing any hypotheses.\n"
"\n"
"Here's an example we have already done, but try and do it using the `apply` "
"tactic:\n"
"\n"
msgstr ""

#: Logical statements level 1
msgid ""
"Let $P,Q$ be logical statements. If $P$ implies $Q$ and $P$ is true, then $Q"
"$ is true. \n"
msgstr ""

#: Logical statements level 1
msgid ""
"\n"
"## The `apply` tactic\n"
"\n"
"If your lemma looks like\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ Q\n"
"```\n"
"\n"
"then the tactic `apply h,` will change it to\n"
"\n"
"```\n"
"h : P → Q\n"
"⊢ P\n"
"```\n"
"\n"
"The `apply` tactic is useful for *arguing backwards*. It reduces the goal to "
"a potentially easier \n"
"goal, without changing any hypotheses.\n"
"\n"
"\n"
msgstr ""

#: Logical statements level 2
msgid "intro"
msgstr ""

#: Logical statements level 2
msgid ""
"\n"
"## The `intro` tactic.\n"
"\n"
"If your goal is \n"
"\n"
"```\n"
"⊢ P → Q\n"
"```\n"
"\n"
"meaning we need to prove the `P` implies `Q` then the tactic <mark style ="
"\"background-color : #ebdef0 \">`intro hp,`</mark> \n"
"will take `P` as true with proof `hp` and add `hp : P` to the assumptions. "
"In addition, \n"
"it turn your goal into `⊢ Q`. \n"
"\n"
"In other words the state of the lemma becomes:  \n"
"\n"
"```\n"
"hp : P\n"
"⊢ Q\n"
"```\n"
"\n"
"Lets look at an example that needs the `intro` tactic: \n"
"\n"
"\n"
msgstr ""

#: Logical statements level 2
msgid "Start with `intro p`.\n"
msgstr ""

#: Logical statements level 2 6 Not logic 1 4 7
msgid "Hint"
msgstr ""

#: Logical statements level 2
msgid ""
" `intros` can be used to introduce\n"
"more than one assumption at once. Don't forget\n"
"to name your hypotheses, e.g. `intros hp hq` if your goal is `P → Q → R`.\n"
msgstr ""

#: Logical statements level 2 7 And & Or 1 Not logic 4
msgid "Tip"
msgstr ""

#: Logical statements level 2
msgid "If $P$ is a logical statement then $P\\implies P$.\n"
msgstr ""

#: Logical statements level 2
msgid ""
"\n"
"## The `intro` tactic.\n"
"\n"
"If your goal is to prove the implication\n"
"\n"
"```\n"
"⊢ P → Q\n"
"```\n"
"\n"
"then the tactic\n"
"\n"
"`intro hP,`\n"
"\n"
"will add `hp : P` as an assumption (i.e. `hp` is the proof of `P`) and turn "
"your goal into `⊢ Q`. \n"
"In other words we get: \n"
"\n"
"```\n"
"hP : P\n"
"⊢ Q\n"
"```\n"
"\n"
"Tip : `intros` can be used to introduce\n"
"more than one assumption at once. Don't forget\n"
"to name your hypotheses, e.g. `intros hP hQ` if your goal is `P → Q → R`.\n"
"\n"
msgstr ""

#: Logical statements level 3
msgid ""
"Let $P,Q$ be logical statement and assume $Q$ is true, then $P$ implies $Q"
"$. \n"
msgstr ""

#: Logical statements level 3
msgid ""
"This works because the implication `P → Q` is true unless `Q` is false and "
"`P` is true. In this case\n"
"we are given that `Q` is always true, so the implication holds regardless of "
"the truth value of `P`. \n"
msgstr ""

#: Logical statements level 3 Not logic 4
msgid "Why is this true?"
msgstr ""

#: Logical statements level 4
msgid "If $P,Q$ are logical statements, then $P$ implies $(Q \\implies P)$\n"
msgstr ""

#: Logical statements level 4
msgid ""
"\n"
"Note that implies `→` is not associative: in general `P → (Q → R)` and `(P → "
"Q) → R`\n"
"might not be equivalent. This is like subtraction on numbers -- in general\n"
"`a - (b - c)` and `(a - b) - c` might not be equal.\n"
"So if we write `P → Q → R` then we'd better know what this means.\n"
"The convention in Lean is that it means `P → (Q → R)`. If you think\n"
"about it, this means that to deduce `R` you will need to prove both `P`\n"
"and `Q`. \n"
msgstr ""

#: Logical statements level 4
msgid "Caution"
msgstr ""

#: Logical statements level 5
msgid ""
"If we know `P`, and we also know `P → Q`, we can deduce `Q`. \n"
"This is called \"Modus Ponens\" by logicians.\n"
msgstr ""

#: Logical statements level 5
msgid "If $P$ is true and $P \\implies Q$ is true, then $Q$ is true.\n"
msgstr ""

#: Logical statements level 6
msgid ""
"The goal for this level is to show that implications are transitive. \n"
"That is, if `P → Q` and `Q → R` are true, then so is `P → R`.\n"
msgstr ""

#: Logical statements level 6
msgid "It might be useful to start by using `intros hPQ hQR hP`.\n"
msgstr ""

#: Logical statements level 6
msgid ""
"If $P,Q,R$ are logical statements and $P \\implies Q$ and $Q \\implies R$ "
"then $P \\implies R$.\n"
msgstr ""

#: Logical statements level 7
msgid "Boss level"
msgstr ""

#: Logical statements level 7
msgid ""
" Notice we have three implications, so we need to introduce all of them "
"using `intros`.\n"
"\n"
msgstr ""

#: Logical statements level 7
msgid "Hint 1"
msgstr ""

#: Logical statements level 7
msgid ""
"When using `apply` we need to make sure that we use an assumption that "
"contains our goal.\n"
"\n"
msgstr ""

#: Logical statements level 7
msgid "Hint 2"
msgstr ""

#: Logical statements level 7
msgid ""
"If we have more than one goal to prove, then we need to do them in order. By "
"default the lean \n"
"applies the tactics to the first goal until complete and then moves on to "
"the next.  \n"
"\n"
msgstr ""

#: Logical statements level 7
msgid "Hint 3"
msgstr ""

#: Logical statements level 7
msgid ""
"If $P,Q,R$ are logical statements and\n"
" $(P \\implies Q \\implies R)$  then $((P \\implies Q) \\implies (P "
"\\implies R)$.\n"
msgstr ""

#: Logical statements level 7
msgid ""
"To skip proving a goal you can  write `sorry,`. But don't forget to go back "
"and prove it to solve the\n"
"level.  \n"
"\n"
msgstr ""

#: world_config
msgid "True and False"
msgstr ""

#: True and False level 1
msgid ""
"##  True and False\n"
"\n"
" `Prop` has two special inhabitants, the logical statements <mark style ="
"\"background-color : #ebdef0 \">`true`</mark>,\n"
"with truth value true and <mark style =\"background-color : #ebdef0 "
"\">`false`</mark> with truth value\n"
"false.\n"
"\n"
"\n"
"In the following levels we will work with logical statements combining "
"`true` and `false`.\n"
"\n"
"To help us we need to introduce a new tactic:\n"
"\n"
"## The `triv` tactic\n"
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ true\n"
"```\n"
"\n"
"then <mark style =\"background-color : #ebdef0 \">`triv`</mark> will "
"complete the proof for you. Try it out below:\n"
"\n"
msgstr ""

#: True and False level 1
msgid "The logical statement `true` is true.\n"
msgstr ""

#: True and False level 1
msgid ""
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ true\n"
"```\n"
"then `triv` will complete the proof for you.\n"
"\n"
msgstr ""

#: True and False level 2
msgid "True implies true.\n"
msgstr ""

#: True and False level 3
msgid "False implies true.\n"
msgstr ""

#: True and False level 4
msgid "False implies false.\n"
msgstr ""

#: True and False level 5
msgid ""
"$(\\mathrm{true} \\implies \\mathrm{false}) \\implies \\mathrm{false}$.\n"
msgstr ""

#: world_config
msgid "And & Or"
msgstr ""

#: And & Or level 1
msgid ""
"## The `split` tactic\n"
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ P ∧ Q\n"
"```\n"
"\n"
"then the  <mark style =\"background-color : #ebdef0 \">`split`</mark>  "
"tactic will turn it\n"
"into *two* goals `⊢ P` and `⊢ Q`.\n"
"\n"
msgstr ""

#: And & Or level 1
msgid ""
"It is best practice to indicate when you are working with two goals, either "
"by using squiggly \n"
"brackets like this:\n"
"\n"
"```\n"
"...\n"
"split,\n"
"{ working on P,\n"
"  end of proof of P },\n"
"{ working on Q,\n"
"  end of proof of Q },\n"
"```\n"
"\n"
"or by using indentation like this:\n"
"\n"
"```\n"
"split,\n"
"  working on P,\n"
"  end of proof of P,\n"
"working on Q,\n"
"...\n"
"```\n"
msgstr ""

#: And & Or level 1
msgid ""
"Let $P,Q$ be logical statements and assume that they are both true, then $P "
"∧ Q$ is \n"
"true.\n"
msgstr ""

#: And & Or level 2
msgid ""
"`split` can also be used for if and only if statements. For example, if you "
"have `⊢ P ↔ Q` and apply\n"
"`split`, then your goal will change from \n"
"\n"
"```\n"
"⊢ P ↔ Q\n"
"```\n"
"to two goals, `⊢ P → Q` and `⊢ Q → P`.\n"
msgstr ""

#: And & Or level 2
msgid ""
"Let $P$ be a logical statement, then $P$ is true if and only if $P$ is "
"true.\n"
msgstr ""

#: And & Or level 2
msgid ""
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ P ∧ Q\n"
"```\n"
"\n"
"then the  `split` tactic will turn it into *two* goals `⊢ P` and `⊢ Q`.\n"
"\n"
"Moreover, if you have an iff `P ↔ Q` then splitting it will give you two "
"goals, `P → Q` \n"
"(i.e \"`P` only if `Q`\") and `P ← Q ` (i.e \"`P` if `Q`\") to prove.\n"
"\n"
msgstr ""

#: And & Or level 3
msgid ""
"## `left` and `right`\n"
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ P ∨ Q\n"
"```\n"
"\n"
"then   <mark style =\"background-color : #ebdef0 \">`left`</mark>  changes "
"the goal to `⊢ P`. \n"
"Similarly,  <mark style =\"background-color : #ebdef0 \">`right`</mark>  "
"changes the goal to `⊢ Q`.\n"
msgstr ""

#: And & Or level 3
msgid ""
"The logic is that `P` implies `P ∨ Q` so it is enough to prove `P`. \n"
"\n"
msgstr ""

#: And & Or level 3
msgid "Why does this work?"
msgstr ""

#: And & Or level 3
msgid ""
"Let $P,Q$ be logical statements and assume $P$ is true, then $P ∨ Q$ is "
"true.\n"
msgstr ""

#: And & Or level 3
msgid ""
"\n"
"If your lemma has the goal: \n"
"\n"
"```\n"
"⊢ P ∨ Q\n"
"```\n"
"\n"
"then `left` changes the goal to `⊢ P`. Similarly `right` changes the goal to "
"`⊢ Q`.\n"
"\n"
msgstr ""

#: And & Or level 4
msgid ""
"## The `cases` tactic\n"
"\n"
"`cases` is a very general-purpose tactic for \"deconstructing\" hypotheses.\n"
"If `h` is an assumption which somehow \"bundles up\" two pieces of "
"information,\n"
"then  <mark style =\"background-color : #ebdef0 \">`cases h with h1 h2`</"
"mark>  will make the \n"
"assumption `h` vanish and will replace it with the two \"components\" which "
"made the proof of `h` in the first place.\n"
"An example of this occurring is if you have the assumption `h : P ∧ Q` which "
"contains a \n"
"proof of `P` and a proof of `Q`.\n"
"\n"
"\n"
"\n"
"For example, if you have an assumption\n"
"\n"
"```\n"
"h : P ∧ Q\n"
"```\n"
"\n"
"then\n"
"\n"
"`cases h with hP hQ,`\n"
"\n"
"will delete `h` and replace it with\n"
"\n"
"```\n"
"hP : P\n"
"hQ : Q\n"
"```\n"
"Try it out below.\n"
"\n"
msgstr ""

#: And & Or level 4
msgid "If $P,Q$ are logical statements and $P ∧ Q$ is true then so is $P$.\n"
msgstr ""

#: And & Or level 4
msgid ""
"\n"
"If you have a hypothesis\n"
"\n"
"```\n"
"h : P ∧ Q\n"
"```\n"
"\n"
"then\n"
"\n"
"`cases h with hP hQ,`\n"
"\n"
"will delete `h` and replace it with\n"
"\n"
"```\n"
"hP : P\n"
"hQ : Q\n"
"```\n"
"\n"
"You can also use it for \"or's\". Specifically, if you have `h : P ∨ Q` then "
"`cases h` will\n"
"give you two goals, one where `P` is true and one where `Q` is true.\n"
"\n"
msgstr ""

#: And & Or level 5
msgid ""
"You can also use `cases` when working with the `∨` (\"or\") connective. For "
"example, if you have\n"
"the assumption\n"
"\n"
"```\n"
"h : P ∨ Q\n"
"``` \n"
"\n"
"then `cases h with hp hq` will convert your state into the following two "
"states:\n"
"\n"
"```\n"
"P : Prop\n"
"hp : P\n"
"⊢ P\n"
"```\n"
"and\n"
"\n"
"```\n"
"P : Prop\n"
"hq : Q\n"
"⊢ Q\n"
"```\n"
"one where `P` is true and one where `Q` is true.\n"
"\n"
"Try this in the lemma below.\n"
msgstr ""

#: And & Or level 5
msgid ""
"If $P$ is a logical statement and $P$ or $P$ is true, then $P$ is true.\n"
msgstr ""

#: And & Or level 6
msgid "This level proves that `∧` is a commutative operator. \n"
msgstr ""

#: And & Or level 6
msgid ""
"Let $P,Q$ be logical statements, then $P ∧ Q$ is true iff $Q ∧ P$ is true.\n"
msgstr ""

#: And & Or level 7
msgid ""
"If $P,Q,R$ are logical statements then $P ∧ Q$ implies that \n"
"$(P \\implies R) \\implies (Q \\implies R) \\implies R$ \n"
msgstr ""

#: And & Or level 8
msgid "This level will show that `∧` is *transitive*.\n"
msgstr ""

#: And & Or level 8
msgid ""
"If $P,Q,R$ are logical statements, then $P ∧ Q$ and $Q ∧ R$ imples $P ∧ R$.\n"
msgstr ""

#: world_config
msgid "Logic laws"
msgstr ""

#: Logic laws level 1
msgid "absorption laws pt 1"
msgstr ""

#: Logic laws level 1
msgid "This level proves the first *absorption* law.\n"
msgstr ""

#: Logic laws level 1
msgid ""
"If $P,Q$ are logical statements then $P ∧ (P ∨ Q)$ is true if and only if $P"
"$ is true.\n"
msgstr ""

#: Logic laws level 2
msgid "absorpsion laws pt 2"
msgstr ""

#: Logic laws level 2
msgid "This level proves the second absorption law.\n"
msgstr ""

#: Logic laws level 2
msgid ""
"If $P,Q$ are logical statements then $P ∨ (P ∧ Q)$ is true if and only if $P"
"$ is true.\n"
msgstr ""

#: Logic laws level 3
msgid "Associative laws pt 1"
msgstr ""

#: Logic laws level 3
msgid "This level proves that `∧` is *associative*.\n"
msgstr ""

#: Logic laws level 3
msgid ""
"If $P,Q,R$ are logical statements, then $P ∧ (Q ∧ R)$ is true iff $(P ∧ Q) ∧ "
"R$ is true.\n"
msgstr ""

#: Logic laws level 4
msgid "Associative laws pt 2"
msgstr ""

#: Logic laws level 4
msgid "This level proves that `∨` is associative.\n"
msgstr ""

#: Logic laws level 4
msgid ""
"If $P,Q,R$ are logical statements then $P ∨ (Q ∨ R)$ is true iff $(P ∨ Q) ∨ R"
"$ is true.\n"
msgstr ""

#: Logic laws level 5
msgid "Distributive laws 1"
msgstr ""

#: Logic laws level 5
msgid "This level proves the *distributivity* of `∧` over `∨`.\n"
msgstr ""

#: Logic laws level 5
msgid ""
"If $P,Q,R$ are logical statements then $P ∧ (Q ∨ R)$ is true iff $(P ∧ Q) ∨ "
"(P ∧ R)$ is true.\n"
msgstr ""

#: Logic laws level 6
msgid "Distributive laws 2"
msgstr ""

#: Logic laws level 6
msgid "This level proves the distributivity of `∨` over `∧`.\n"
msgstr ""

#: Logic laws level 6
msgid ""
"If $P,Q,R$ are logical statements then $P ∨ (Q ∧ R)$ is true iff $(P ∨ Q) ∧ "
"(P ∨ R)$ is true.\n"
msgstr ""

#: world_config
msgid "Not logic"
msgstr ""

#: Not logic level 1
msgid ""
"\n"
"\n"
"By definition `¬Q` is equivalent to `Q → false`. Lets call this result\n"
"\n"
"`not_iff_imp_false (P : Prop) : ¬ P ↔ (P → false)`\n"
"\n"
msgstr ""

#: Not logic level 1
msgid ""
"\n"
"You can convince yourself this is true by writting out the truth table for "
"`¬ P` and `P → false`.\n"
"\n"
"\n"
"In order to use it, lets look at a new tactic.\n"
"\n"
"## The `rw` tactic\n"
"\n"
"The <mark style =\"background-color : #ebdef0 \">`rw`</mark> tactic (short "
"for <mark style =\"background-color : #ebdef0 \">`rewrite`</mark>) \n"
"is a tactic that allows you to do a substitution. For example, if we have "
"the\n"
"assumption `h : P ↔ Q`, then `rw h` will replace the (first) `P` in the goal "
"with `Q`. If instead you would like to \n"
"turn the first `Q` in your goal to `P` then use `rw ←h`. (To get the `←` "
"arrow, type `\\l`).\n"
"\n"
"Combining `rw` and `not_iff_imp_false`, try to prove the following:\n"
"\n"
msgstr ""

#: Not logic level 1
msgid " Start by using `rw not_iff_imp_false,` and see what changes.\n"
msgstr ""

#: Not logic level 1
msgid ""
"If $P$ and $Q$ are propositions, and $P\\implies Q$, then\n"
"$\\lnot Q\\implies \\lnot P$. \n"
msgstr ""

#: Not logic level 1
msgid ""
"If you want to use the `rw` tactic on one of your assumptions then this can "
"be done.\n"
"\n"
"For example, if we have `h1 : P ↔ Q` and `h2` is the assumption we want to "
"change, then\n"
" `rw h1 at h2` will substitute the first `P` in `h2` to `Q`. \n"
"\n"
msgstr ""

#: Not logic level 1
msgid ""
"\n"
"The `rw` tactic is a tactic that allows you to substitute in things. For "
"example, if we have the\n"
"assumption `h: P ↔ Q`, then `rw h` will replace the `P`'s in the goal with "
"`Q`'s. If instead you would like to \n"
"turn all of the `Q`'s in your goal to `P`'s then using `rw ←h` will do this. "
"(To get the `←` arrow, type `\\l`).\n"
"\n"
"Moreover, if we have `h1 : P ↔ Q` and `h2` is the assumption we want to "
"change, then\n"
" `rw h1 at h2` will substitute the first `P` in `h2` to `Q`. \n"
"\n"
msgstr ""

#: Not logic level 2
msgid "The `exfalso` tactic."
msgstr ""

#: Not logic level 2
msgid ""
"In this level we want to prove prove that `false` implies any proposition "
"`P`.\n"
"\n"
msgstr ""

#: Not logic level 2
msgid "You can do this using only `intro` and `cases`.\n"
msgstr ""

#: Not logic level 2
msgid "If $P$ is a logical statement then $\\mathrm{false}$ implies $P$.\n"
msgstr ""

#: Not logic level 2
msgid ""
"One way to solve this level is to use `intro h` followed by `cases h`.  "
"Notice that using `intro h`,\n"
"introduces the assumption `h : false`. Lean thinks of `false` as empty, i.e "
"having no elements. \n"
"`cases h` goes through each element in `h` and tries to prove our goal. \n"
"But since our assumption is `false` there are no cases, so the result is "
"trivially true. \n"
"To make sense of this outside of Lean, we think that starting from a false "
"statement we can have \n"
"any outcome, both true and false (see levels 3 & 4 of \"True and False\" "
"world).\n"
"\n"
msgstr ""

#: Not logic level 2
msgid "What is going on here?"
msgstr ""

#: Not logic level 2
msgid ""
"## The `exfalso` tactic \n"
"\n"
"A way to use this result in Lean is with the <mark style =\"background-"
"color : #ebdef0 \"> `exfalso`</mark> tactic, \n"
"which changes any goal to `false`. \n"
msgstr ""

#: Not logic level 2
msgid "This changes any goal to `false`.\n"
msgstr ""

#: Not logic level 3
msgid ""
"In this level we will prove that `P ∧ ¬ P` is always false. This is an "
"example of a *contradiction*.\n"
"\n"
msgstr ""

#: Not logic level 3
msgid "If $P$ is a logical statement, then $P ∧ ¬P$ is false.\n"
msgstr ""

#: Not logic level 4
msgid ""
"##  Proof by contradiction. \n"
"\n"
"In this level we will see why proofs by contradiction are valid. The key is "
"to note that for any\n"
"logical statements `P,Q`, we have that ` P ∧ (¬ P) → Q` is true.\n"
"\n"
msgstr ""

#: Not logic level 4
msgid ""
"We have just seen that `P ∧ (¬ P)`is always false and `false → Q` is always "
"true.\n"
msgstr ""

#: Not logic level 4
msgid "Start by introducing your assumption and then using `exfalso`.\n"
msgstr ""

#: Not logic level 4
msgid ""
"If $P$ and $Q$ are logical statements, then\n"
"$(P\\land(\\lnot P))\\implies Q.$\n"
msgstr ""

#: Not logic level 4
msgid ""
"If you want to use to use this result later on then you can type <mark style "
"=\"background-color : #ebdef0 \">`apply (contra P Q)`</mark> where `P,Q` "
"are\n"
"the assumptions you want to use. You can also use the tactic <mark style ="
"\"background-color : #ebdef0 \">`by_contra`</mark>  \n"
"to achieve similar results. \n"
"\n"
msgstr ""

#: Not logic level 5
msgid ""
"We proved earlier that `(P → Q) → (¬ Q → ¬ P)`. The converse,\n"
"that `(¬ Q → ¬ P) → (P → Q)` is certainly true, but trying to prove\n"
"it using the tactics we've learnt so far is impossible. \n"
msgstr ""

#: Not logic level 5
msgid ""
" \n"
"Suppose we tried to prove this with the tactics we have seen so far, then "
"our proof might look \n"
"something like:\n"
"```\n"
"intro h,\n"
"intro p,\n"
"rw not_iff_imp_false at h,\n"
"rw not_iff_imp_false at h,\n"
"```\n"
"You are then left with the following state:\n"
"```\n"
"P Q : Prop,\n"
"h : (Q → false) → P → false\n"
"p : P\n"
"⊢ Q\n"
"```\n"
"and now we are stuck. In fact, using tactics such as `intro` and `apply` you "
"will never be able to \n"
"prove this lemma as this is not provable in \"constructive logic\". The key "
"in proving this is to use \n"
"Lean's version of a truth table!\n"
"\n"
msgstr ""

#: Not logic level 5
msgid "Why is this impossible?"
msgstr ""

#: Not logic level 5
msgid ""
"In order to continue we need a new tactic.\n"
"\n"
"## The `by_cases` tactic\n"
"\n"
"The tactic <mark style =\"background-color : #ebdef0 \">`by_cases`</mark> "
"allows us to create Lean's \n"
"version of a truth table.\n"
"\n"
"For example, if you have `P Q : Prop`, then <mark style =\"background-"
"color : #ebdef0 \">`by_cases hp : P; by_cases hq : Q,`</mark>\n"
"will create four goals, one for each of the four  possibilities for `P,Q`, i."
"e., \n"
"\n"
"```md\n"
"| `P`     | `Q`     |\n"
"| --------|---------|\n"
"| `true`  | `true`  | \n"
"| `true`  | `false` |   \n"
"| `false` | `true`  |   \n"
"| `false` | `false` |   \n"
"```\n"
"\n"
"**Note the semicolon**! It means \"do the next tactic to all the goals, not "
"just the first\".\n"
"\n"
msgstr ""

#: Not logic level 5
msgid ""
"If $P$ and $Q$ are logical statements, then\n"
"$(\\lnot Q\\implies \\lnot P)\\implies(P\\implies Q).$\n"
msgstr ""

#: Not logic level 5
msgid ""
"The `by_cases` tactic works by adding the assumption `P ∨ ¬ P` and then "
"doing `cases` on this.\n"
"The fact that `P ∨ ¬ P` is true is called the *law of the excluded middle*, "
"and it cannot be proven \n"
"by just using tactics such as `intro` and `apply`.\n"
msgstr ""

#: Not logic level 5
msgid "+1 Intelligence"
msgstr ""

#: Not logic level 5
msgid ""
" \n"
"The ``by_cases`` tactic is a simple truth table tactic: ``by_cases P`` turns "
"one goal into two goals, \n"
"with ``P`` is assumed in the first, and ``¬P`` in the second.\n"
"\n"
"Examples\n"
"--------\n"
"\n"
"1) If ``P`` is a proposition, then ``by_cases P`` turns your goal into two "
"goals, \n"
"and in each of your new tactic states you have one extra hypothesis. \n"
"In the first one you have a new hypothesis ``h : P`` and in the second you "
"have a new hypothesis ``h : ¬P``.\n"
"\n"
"2) If you already have a hypothesis ``h`` then this can get a bit "
"confusing, \n"
"so you can also do ``by_cases hP : P``; then your new hypotheses will be "
"``hP : P`` and ``hP : ¬P``.\n"
msgstr ""

#: Not logic level 6
msgid ""
"If $P$ is a logical statement then $P \\implies ¬P$ implies $"
"\\mathrm{false}$.\n"
msgstr ""

#: Not logic level 7
msgid "Try using `rw not_iff_imp_false,`.\n"
msgstr ""

#: Not logic level 7
msgid "If $P$ is a logical statement then $P \\implies ¬ ¬P$.\n"
msgstr ""

#: Not logic level 8
msgid "If $P$ is a logical statement then $¬(¬P) \\implies P$.\n"
msgstr ""

#: Not logic level 9
msgid ""
"If $P, Q$ are logical statements then $(P \\implies Q)$ is equivalent to "
"$(¬P) ∨ Q$.\n"
msgstr ""

#: world_config
msgid "De Morgan's laws"
msgstr ""

#: De Morgan's laws level 1
msgid "De Morgan's laws, First Boss"
msgstr ""

#: De Morgan's laws level 1
msgid ""
"It is time to tackle our final bosses, the *De Morgans laws*. Use your "
"tactics wisely!\n"
"\n"
msgstr ""

#: De Morgan's laws level 1
msgid ""
"\n"
"You can do this only using `split`, `intro`, `apply`, `left`, `right`.\n"
"\n"
msgstr ""

#: De Morgan's laws level 1
msgid "First Aid"
msgstr ""

#: De Morgan's laws level 1
msgid ""
"\n"
"If you have a goal `¬P` then `intro h` will turn your goal into `false` and "
"give you\n"
"an extra assumption `h : P`.\n"
"\n"
msgstr ""

#: De Morgan's laws level 1
msgid "Second Aid"
msgstr ""

#: De Morgan's laws level 1
msgid ""
"\n"
"If you have a goal `false` and an assumption `h : ¬P`, then `apply h` will "
"turn your goal \n"
"into `P`.\n"
"\n"
msgstr ""

#: De Morgan's laws level 1
msgid "Third Aid"
msgstr ""

#: De Morgan's laws level 1
msgid ""
"If $P,Q$ are logical statements  $¬(P ∨ Q)$ is equivalent to $¬ P ∧ ¬Q$.\n"
msgstr ""

#: De Morgan's laws level 2
msgid "De Morgan's laws, Final Boss"
msgstr ""

#: De Morgan's laws level 2
msgid "For this final battle with De Morgan, you are on your own!\n"
msgstr ""

#: De Morgan's laws level 2
msgid ""
"If $P,Q$ are logical statements then $¬(P ∧ Q)$ is equivalent to $¬ P ∨ ¬Q"
"$.\n"
msgstr ""

#: world_config
msgid "More true and false"
msgstr ""

#: More true and false level 1
msgid "$¬ \\mathrm{false}$ implies $\\mathrm{true}$.\n"
msgstr ""

#: More true and false level 2
msgid "$¬ \\mathrm{true}$ implies $\\mathrm{false}$.\n"
msgstr ""

#: More true and false level 3
msgid ""
"If $P$ is a logical statement then $P$ implies $(P \\implies "
"\\mathrm{false}) \\implies \\mathrm{false}$\n"
msgstr ""

#: More true and false level 4
msgid ""
"If $P, Q$ are logical statements then $P \\implies \\mathrm{false}$ implies "
"$P \\implies Q$. \n"
msgstr ""

#: More true and false level 5
msgid ""
"For any logical statement $P$, $(\\mathrm{true} \\implies \\mathrm{false})$ "
"implies $P$. \n"
msgstr ""

#: world_config
msgid "Bonus content"
msgstr ""

#: Bonus content level 1
msgid ""
"If you're sad that the game is over, here is some bonus content to keep you "
"going.\n"
msgstr ""

#: Bonus content level 1
msgid "A long chain of implications.\n"
msgstr ""

#: Bonus content level 2
msgid "A nested chain ofimplications.\n"
msgstr ""

#: Bonus content level 3
msgid "An even more nested implications\n"
msgstr ""

#: Bonus content level 4
msgid "This is getting silly now!\n"
msgstr ""

#: Bonus content level 5
msgid "Are we there yet?\n"
msgstr ""

#: Bonus content level 6
msgid "Boss fight"
msgstr ""

#: Bonus content level 6
msgid "Time for another boss fight!\n"
msgstr ""

#: Bonus content level 7
msgid "Super Boss"
msgstr ""

#: Bonus content level 7
msgid "Time for a super boss fight!\n"
msgstr ""

#: Bonus content level 7
msgid ""
"Congratulations! If you are reading this you are about to unlock a cheat "
"code!\n"
"Lean has more advanced tactics that can solve all of the levels very "
"quickly. For example,\n"
"using the `tauto!` tactic should allow you to solve the whole game! (but "
"what's the fun in that?)\n"
msgstr ""

#: Bonus content level 7
msgid "Cheat code"
msgstr ""

#: Bonus content level 7
msgid ""
"That's all folks! If you enjoyed this then check out the\n"
"<a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/natural_number_game/\" "
"target=\"blank\">Natural Numbers Game</a>\n"
"and Kevin Buzzard's <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/"
"formalising-mathematics-2022/\" target=\"blank\">Formalising mathematics</a> "
"course.\n"
"\n"
msgstr ""
